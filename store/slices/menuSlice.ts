import {
  createAsyncThunk,
  createSlice,
  current,
  PayloadAction,
} from "@reduxjs/toolkit";

import type { AppState, AppThunk } from "../index";

// interface Organization {
//     branch: string
//     role: string
//     organization: {}
// }

// interface UserState {
//     email: string
//     firstName: string
//     id: number
//     lastName: string
//     organizations: Organization[]
//     role: string
// }

// const initialState={
//     active: true
//     categories: (2) [{…}, {…}]
//     id: 4
//     name: "Test"
//     setting: {font: 'Test', fontSize: '10', fontColor: 'red', backgroundColor: 'black'}
// }
const initialState = {
  menu: null,
};

export const menuSlice = createSlice({
  name: "menu",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setMenu: (state, action) => {
      state.menu = action.payload;
    },
    addItem: (state, action) => {
      console.log(current(state.menu))
      for (let index = 0; index < state.menu.categories.length; index++) {
        const element = state.menu.categories[index];
        if (element.id == action.payload.categoryId) {
          state.menu.categories[index].items = [...state.menu.categories[index].items, action.payload]
          break
        }
        
        // if(category.id) == action.payload.categoryId){
        //   state.menu.categories[index].items = [...state.menu.categories[index].items, action.payload]
        // }
        
      }
    },
    removeItem: (state, action) => {
      // current(state.menu.categories)
      for (let index = 0; index < state.menu.categories.length; index++) {
        const element = state.menu.categories[index];
        for (let index = 0; index < element.items.length; index++) {
          const item = element.items[index];
          console.log(current(item))
          console.log(action.payload)
          if (item.id == action.payload) {
            // Filter out the item
            state.menu.categories[index].items = state.menu.categories[index].items.filter(item => item.id != action.payload)
            break
          }
          
        }
        // if(category.id) == action.payload.categoryId){
        //   state.menu.categories[index].items = [...state.menu.categories[index].items, action.payload]
        // }
        
      }
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});

export const { setMenu, addItem,removeItem } = menuSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectMenu = (state: AppState) => state.menu;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default menuSlice.reducer;
