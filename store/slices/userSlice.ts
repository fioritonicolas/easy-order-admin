import { createAsyncThunk, createSlice, current, PayloadAction } from '@reduxjs/toolkit'

import type { AppState, AppThunk } from '../index'


interface Organization {
    branch: string
    role: string
    organization: {}
}

interface UserState {
    email: string
    firstName: string
    id: number
    lastName: string
    organizations: Organization[]
    role: string
}

const initialState={
    email: '',
    firstName: '',
    id: 0,
    lastName: '',
    organizations: [],
    role: ''
}

export const userSlice = createSlice({
  name: 'user',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setUser: (state,action) => {
        state = action.payload
    },

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
})

export const { setUser } = userSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUser = (state: AppState) => state.user

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.


export default userSlice.reducer